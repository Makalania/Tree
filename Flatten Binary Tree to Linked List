/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void flatten(TreeNode root) {
        if (root == null) {
            return;
        }
        
        preOrder(root);
        
        return;
    }
    
    public void preOrder(TreeNode root) {
        if (root == null) {
            return;
        }
        
        TreeNode right = root.right;
        
        if (root.left != null) {
            root.right = root.left;
            root.left = null;
            
            while (root.right != null) {
                root = root.right;    
            }
            
            root.right = right;
        }
        
        preOrder(root.right);
        
    }
}










/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void flatten(TreeNode root) {
        if (root == null) {
            return;
        }
        
        preOrder(root);
        
        return;
    }
    
    public void preOrder(TreeNode root) {
        if (root == null) {
            return;
        }
        preOrder(root.left);
        TreeNode right = root.right;
        
        if (root.left != null) {
            root.right = root.left;
            root.left = null;
            
            while (root.right != null) {
                root = root.right;    
            }
            
            root.right = right;
        }
        
        preOrder(root.right);
        
    }
}

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void recoverTree(TreeNode root) {
        if (root == null) {
            return;
        }
        
        TreeNode first = null;
        TreeNode second = null;
        Stack<TreeNode> stack = new Stack<TreeNode>();
        TreeNode pre = new TreeNode(Integer.MIN_VALUE);
        TreeNode cur = root;
        
        while (cur != null || !stack.empty()) {
            while (cur != null) {
                stack.push(cur);
                cur = cur.left;
            }
            
            cur = stack.pop();
            if (cur.val < pre.val) {
                if (first != null) {
                    second = cur;
                }
                else {
                    first = pre;
                    second = cur;
                }
            }
            
            pre = cur;
            cur = cur.right;
            
        }
        
        int temp = first.val;
        first.val = second.val;
        second.val = temp;
        
        return;
    }
}
